// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var Datastore, abstract, entity, gcloud,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  abstract = require('abstract-leveldown');

  gcloud = require('gcloud');

  entity = require('gcloud/lib/datastore/entity');

  Datastore = (function(_super) {
    __extends(Datastore, _super);

    function Datastore(location) {
      var _ref;
      if (!(this instanceof Datastore)) {
        return new Datastore(location);
      }
      Datastore.__super__.constructor.apply(this, arguments);
      _ref = location.split(':'), this.projectId = _ref[0], this.keyFilename = _ref[1];
    }

    Datastore.prototype._open = function(options, callback) {
      this._dataset = gcloud.datastore.dataset({
        projectId: this.projectId,
        keyFilename: this.keyFilename
      });
      return process.nextTick(function() {
        return callback(null, this);
      });
    };

    Datastore.prototype._put = function(key, value, options, callback) {
      var data;
      if (value == null) {
        value = '';
      }
      key = this._key(key, options);
      data = {
        value: value
      };
      return this._dataset.save({
        key: key,
        data: data
      }, callback);
    };

    Datastore.prototype._get = function(key, options, callback) {
      key = this._key(key, options);
      return this._dataset.get(key, function(error, entity) {
        var value, _ref;
        if (error != null) {
          return callback(error);
        }
        value = entity != null ? (_ref = entity.data) != null ? _ref.value : void 0 : void 0;
        if (value != null) {
          if (options.asBuffer === true) {
            value = new Buffer(value);
          }
          return callback(null, value);
        } else {
          if (value == null) {
            return callback(new Error('NotFound'));
          }
        }
      });
    };

    Datastore.prototype._del = function(key, options, callback) {
      key = this._key(key, options);
      return this._dataset["delete"](key, callback);
    };

    Datastore.prototype._key = function(key, options) {
      key = '_' + key.toString();
      return this._dataset.key([options.kind || 'Level', key]);
    };

    Datastore.prototype._batch = function(array, options, callback) {
      var fn, onCommit, req;
      fn = (function(_this) {
        return function(acc, obj, index) {
          var ent, key;
          key = _this._key(obj.key, options);
          if (obj.type === 'del') {
            acc["delete"].push(entity.keyToKeyProto(key));
          } else {
            ent = entity.entityToEntityProto({
              value: obj.value || ''
            });
            ent.key = entity.keyToKeyProto(key);
            acc.upsert.push(ent);
          }
          return acc;
        };
      })(this);
      req = {
        mutation: array.reduce(fn, {
          upsert: [],
          insert_auto_id: [],
          "delete": []
        })
      };
      onCommit = function(error) {
        return callback(error);
      };
      if (this._dataset.id) {
        this._dataset.requests_.push(req);
        return this._dataset.requestCallbacks_.push(onCommit);
      } else {
        return this._dataset.makeReq_('commit', req, onCommit);
      }
    };

    return Datastore;

  })(abstract.AbstractLevelDOWN);

  module.exports = Datastore;

}).call(this);
